<?php namespace App\Http\Controllers;

use App\Models\Bot;
use App\Models\Cabinet;
use App\Models\Orders;
use App\Models\OrdersBalance;
use App\Models\OrdersFields;
use App\Models\OrdersValues;
use App\Models\Users;
use App\Models\UsersProfiles;
use Illuminate\Support\Facades\Auth;
use Session;
use Request;
use DB;
use App\Constructor\helpers\BTBooster;
use App\Constructor\controllers\BTController;

class OrdersController extends BTController {

    public $fields = [];
    public $baseFields = [];
    public $valueFields = [];
    protected $postValues = [];
    protected $profile = null;

	public function cbInit() {
		# START CONFIGURATION DO NOT REMOVE THIS LINE
		$this->table               = 'orders';
		$this->primary_key         = 'id';
		$this->title_field         = "bot_id";
		$this->button_action_style = 'button_icon';
		$this->button_import 	   = FALSE;
		$this->button_export 	   = FALSE;
		# END CONFIGURATION DO NOT REMOVE THIS LINE

		# START COLUMNS DO NOT REMOVE THIS LINE
		# END COLUMNS DO NOT REMOVE THIS LINE

		# START FORM DO NOT REMOVE THIS LINE
		$this->form = $this->fields;
		# END FORM DO NOT REMOVE THIS LINE

        $this->button_exts = [
            'Сохранить и разослать сейчас' => [
                'type' => 'submit',
                'class' => 'bg-yellow-700',
                'name' => 'send_now',
            ],
            'Отправить по рассписанию' => [
                'id' => 'send_time',
                'type' => 'button',
                'class' => 'bg-orange-700',
                'name' => 'send_time',
                'modal' => [
                    'id' => 'timesend-modal',
                    'component' => 'components.send_time',
                ]
            ]
        ];
	}

	public function hook_before_edit(&$postdata,$id) {
//	      dump(request()->request->get('send_now'));
//        dump(request()->request);
//        dump($t = strtotime(request()->request->get('mail_at')));
//        dump(date('Y-m-d H:i', $t));
//        dump($postdata);
//        dd(request()->request->get('submit'));

	    $this->postValues = $postdata;
        $time = strtotime($this->postValues['work_day_at'].' '.$this->postValues['work_time_at']);
        $postdata = [
            'id' => $id,
            'time_at' => $time,
        ];
        if (request()->request->get('send_now')) {
            $postdata['status'] = 0;
            $postdata['active'] = 1;
            $postdata['type_send'] = 1;
        } else if (!request()->request->get('submit') && request()->request->get('mail_at')) {
            $postdata['status'] = 0;
            $postdata['active'] = 1;
            $postdata['type_send'] = 2;
            $postdata['send_at'] = strtotime(request()->request->get('mail_at'));
        }
	}

    public function hook_after_edit($id)
    {
        //dump($this->baseFields);
        //dd($this->postValues);
        OrdersBalance::where('orders_id', $id)->update([
            'profit' => $this->postValues['profit'],
            'expense' => $this->postValues['expense'],
            'debt' => $this->postValues['debt'],
            'comments' => $this->postValues['comments'],
        ]);

        foreach ($this->postValues as $key => $val) {
            foreach ($this->baseFields as $field) {
                if ($field->type == $key) {
                    OrdersValues::where('orders_id', $id)->where('orders_fields_id', $field->id)
                        ->update(['value' => $val]);
                }
            }
        }
        parent::hook_after_edit($id); // TODO: Change the autogenerated stub
    }

    public function hook_before_add(&$postdata) {

	    /*unset($postdata['password_confirmation']);
        $cabinet = \App\Models\Cabinet::curCabinet();
        $postdata['id_cms_privileges'] = 5;
        $postdata['cabinet_id'] = $cabinet->id;*/
        //dd($postdata);
        $cabinet = \App\Models\Cabinet::curCabinet();

        $this->postValues = $postdata;
        $time = strtotime($this->postValues['work_day_at'].' '.$this->postValues['work_time_at']);
        $postdata = [
            'bot_id' => $postdata['bot_id'],
            'cabinet_id' => $cabinet->id,
            'time_at' => $time,
        ];

        $num = 1;
        $nb = date('-d/m/Y');
        while (Orders::where('cabinet_id', $cabinet->id)->where('number', $num.$nb)->first()) {
            $num++;
        }
        $postdata['number'] = $num.$nb;

        if (request()->request->get('send_now')) {
            $postdata['status'] = 0;
            $postdata['active'] = 1;
            $postdata['type_send'] = 1;
        } else if (!request()->request->get('submit') && request()->request->get('mail_at')) {
            $postdata['status'] = 0;
            $postdata['active'] = 1;
            $postdata['type_send'] = 2;
            $postdata['send_at'] = strtotime(request()->request->get('mail_at'));
        }
	}

    public function hook_after_add($id)
    {
        //dump($this->baseFields);
        //dump($this->valueFields);
        //dump($this->postValues);

        unset($this->postValues['bot_id']);
        unset($this->postValues['html']);
        $time = strtotime($this->postValues['work_day_at'].' '.$this->postValues['work_time_at']);
        OrdersBalance::insert([
            'orders_id' => $id,
            'profit' => $this->postValues['profit'],
            'expense' => $this->postValues['expense'],
            'debt' => $this->postValues['debt'],
            'comments' => $this->postValues['comments'],
        ]);
        unset($this->postValues['profit']);
        unset($this->postValues['expense']);
        unset($this->postValues['debt']);
        unset($this->postValues['comments']);

        foreach ($this->baseFields as $field) {
            if (isset($this->postValues[$field->type])) {
                //dump($this->postValues[$field->type]);
                OrdersValues::where('orders_id', $id)->where('orders_fields_id', $field->id)
                    ->insert([
                        'orders_id' => $id,
                        'orders_fields_id' => $field->id,
                        'value' => $this->postValues[$field->type]
                    ]);
            }
        }

        if (Auth::user()->id_cms_privileges == Users::ROLE_DISPETCHER) {
            //$cabinet = Cabinet::curCabinet();
            $order = Orders::where('id', $id)->first();
            $bot = Bot::where('id', $order->bot_id)->first();
            $text = 'Заказ';
            $text .= ' ' . date('d.m.Y', $order->time_at);
            $text .= ' ' . $order->getField('district');
            $text .= ', ' . $order->getField('street');
            $text .= ', ' . $order->getField('house');
            $text .= ', ' . $order->getField('room');
            $text .= ' ' . $order->getField('client_name');
            $text .= ' ' . $order->getField('client_hone');
            $text .= ', ' . $order->getField('title');
            $text .= ', требуется ' . $order->getField('need_employ');
            $text .= ', оплата ' . $order->getField('pay_one');
            $order->cabinet->users->sendMessage($text, $bot->bot_key);
        }

        parent::hook_after_edit($id); // TODO: Change the autogenerated stub
    }
}
